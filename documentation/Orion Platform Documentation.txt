--create GitHub account "neo64neo" for personal repos
--create GitHub organisation "orionware-dev" for various dev tools I need to build Orion
--create GitHub organisation "orionware-libraries" where the Orion Libraries will reside
--setup TortoiseGIT and use it as source controller instead of MyEclipse's SVN in order to keep the directory structure and modularity
--created workspace "orion-libraries"
--created repo "libraries" that has external dependencies for Orion including the Orion libraries themselves
--created repo "delivery-engine" that has Apache Ant, Gradle and JDK8. The JDK8 will be used by the command-line builder so that you do not need to install the JDK8 yourself
--created repo "documentation" that has the Orion Libraries documentation
--created repo "engine" which is the default/core Java project that all the libraries will use
--created repo "libraries-builder" which has the Ant tasks to build all the projects
--created /libraries-builder/build.xml which when run initiates the projects build
--created /libraries-builder/configuration/OrionLibrariesDirectories.prop which has dirs of the projects used by /libraries-builder/build.xml and subtasks
--inside prop files like /libraries-builder/configuration/OrionLibrariesDirectories.prop we can set the value of a prop that includes something like "${some.other.property}/part/of/my/value". This way when Ant runs it will use the ${} as a normal placeholder and substitute the actual value of the prop you put in there. You have to think, however, how to keep the ordering of prop declarations correct otherwise it will not find the prop
--created /libraries-builder/services/BuildPropertiesImporter.xml which is an Ant service that imports prop files from /libraries-builder/configuration
--created /libraries-builder/services/AntService.xml that imports the contributed Ant libraries and antmacros we define
--when we call an Ant file from within another (Ant subtask) and we want the subtask to have the basedir to be set to the dir the subtask Ant XML exists then we call it using the useNativeBasedir="true" flag like:
<ant antfile="/some/path/build.xml" target="some_target" useNativeBasedir="true"/>
--in /libraries-builder/build.xml, the prop orion.libraries.home.dir is globally visible
--in an Ant XML, the code we put right after the <project> declaration is like a constructor that executes before any of the targets. We can place props there and import other Ant XMLs. In order for those Ant XMLs to be executed, we need to have a named target in them so that we can put in the caller's target a dependency on those target names like:
<target name="initialiser" depends="build_properties_importer,initialise_ant_service">.
They are coma-separated and they execute sequentially and in order
--created repo "ant-tasks" that is a library of Ant tasks and macrodefs
--if we want to import an Ant XML we have to do it at the beginning of our Ant file. In a target later on we have to make it depend on the target name of the imported Ant file. If we need the sequence of imports to execute one-by-one then instead of creating a target in the imported Ant file, we create a macrodef and in the next line we just call it