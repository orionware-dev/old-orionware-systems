--make the unit and integration tests packages of datastructures, designpatterns, etc. to be like
the core: "datastructures.services", "datastructures.facades", etc.

--figure out how a DataStructure.java object will encapsulate its size:
Use datastructuresservices.lists.size.impl.tasks.GetSizeTask

--create the Orion Web Platform

--create my own OrionWebContextLoaderListener.java that implements
ServletContextListener. Then, in contextInitialised() put code that
creates a global web application context and registers the
OrionBeanProcessor.java which will be executed every time an object
we have has an @OrionBean annotation. I have to find a way to implement
something like the spring bean post processor, that will be executed
when we try to instantiate a class so that it can handle all Orion
annotations of the class

--Integer.getInteger(string) gets a System.getProperty(string) and then
converts it to an integer. Create something similar using OrionInteger,
that searches in AllProperties.java

--create Index.java interface with methods finished() and increase().
It represents an index in general. Create a class like DataStructureIndex.java
implements Index. Keep a reference of DataStructureIndex inside
OrionArrayList.java and use it somehow to iterate through the list
using this new index. Think of a use case for this

--create OrionArray.java and provide convenience methods

--for different file types we want to create, create the corresponding
builder and buffer like XMLBuilder extends StringBuilder
And XMLBuffer extends StringBuffer

--create a way to do method callbacks: method(s) to be invoked after
a method returns. Use pipeline/filters or something else

--create event-driven dev framework

--create lifecycle interceptor framework

--create a service manager that will run if we want. It will manage
services lifecycles. Maybe it will use the pipeline for service
sequencing. It could be used for business processes

--create KeyValueStore extends Pair

--create Entry extends KeyValueStore

--create ConfigurationEntry extends Entry which will ha e a prop
key and it's value

--create ConfigurationEntries that has List<ConfigurationEntry>

--in config service create method getConfigurationEntries() that
returns ConfigurAtionEntries

--in config service create method getConfigurationEntriesAsList()
that returns List<ConfigurationEntry>

--sequential conditioning: it is like pipes and filters, but for
if statements. See if I can create something for that. We see code
like: if(cond1) then return
If(cond2) then something
We can have a class that represents an if, like IfStatement.java.
inside we have a list of conditions and a method to be executed
if the condition holds

--see how to extend the tomcat classloader so that in the Orion
platform we can have something like an Orion Objects Container

--for every object I have and will create, create a complete
object hierarchy

--elements in Orion data structures can be expired (removed)
at particular intervals or specific time or cron

--create a SOA engine. It can be used in libraries and web

--create a logger

--the logger can print on the standard output, or it can take
a path and it will print errors and exceptions in files in that path

--implement many sorting and other algos and when the sorter
takes in the data structure, it will determine the best algo
to use for that structure

--create features prop files in which we enable/disable features

--see if I can convert so of the core code to annotations

--create DataStructureIterator extends Iterator for convenience

--create generic Converter<SOURCE_TYPE, TARGET_TYPE>

--create ReverseConverter<TARGET_TYPE, SOURCE_TYPE>

--create a generic data structure operator. For example, it will
have add method, that takes a structure, elementToAdd or HashMap,
key, value and it will check what kind of instance the structure
is and based on that it will call .add(element) it .put(key, value),
depending

--create a stopwatch with nanoseconds by default or any other timing
provided by the user like milliseconds, etc.

--create ConditionEvaluator that takes a boolean expression and
returns it's result

--create Cache.java which will have a ConcurrentHashMap internally

--create Cacheable annotation that can be used on classes and
automatically, they will be added to the cache

--create Cached annotation that can be used on setters and method
arguments and automatically they will be retrieved from the cache
if they exist. If not the user has to say if he wants to create
a new instance and put it on the cache automatically
 
--create CacheConfiguration.prop and CacheConfiguration.java to
load the props

--find list of types of diagrams/charts and create library that represents
each on the back-end

--in the events engine, create an EventContext which has all the
variables that are circumstantial to the event

--datasources lib. Also handles in-memory databases

--make OrionRegistry extensible and move it's current content
to other subclasses of OrionRegistry. The facade projects have
a ServicesRegistry extends OrionRegistry
that takes a string (service name) and uses factory to instantiate
the service and returns it. Inside the ServicesRegistry there are
constant strings with the service names and a mapper of these names
to their instance

--create OrionRegistryMapper that holds a map of (string)
registryKey -> OrionRegistry

--create project coreserviceframework which implements the service
framework which I have in GDrive/Orion/documentation/services.txt

--create metadata lib and use the metadata article in Wikipedia as guide

--create monitor lib which is a configurable monitor of things like
which services execute, what data sources are accessed, etc.

--create reporter lib that uses logger to report stuff on the standard
output, files, etc. It also generates PDFs, etc.

--create datavalidation lib for generic input validation

--create corecache lib that implements many caching strategies

--create data lib that aggregates, converts, formats data

--create dataevents lib that uses data and events engine to do
data-driven event programming

--create coding lib that does encoding/decoding

--create cryptology lib for encryption/decryption

--create security lib for authorisation and accessibility and
password generator, unique ID generator

--create datasourcessecurity lib that uses security lib for
databases accessibility

--create systemstatistics lib that creates stats for services
and data usage, etc.

--create lib-specific loggers like CoreAnnotationsLogger extends
OrionLogger

--create messaging lib that uses spring integration or similar
to exchange messages with remote services

--create CronJobs lib

--create emailer lib

--create objectorientedsql lib which is like jOOQ

--create webservices lib as the RESTful engine

--create coreexecutor lib and put in it an asynchronous executor
like we do for the PollPlug emailer and command-line process calls

--see if services and tasks could be configurable. If yes then
create prop file in the for of the service or task

--implement escapers like XSS, HTML escape, XML escape, etc.

--create datetime lib for calendar ops, stopwatch, timestamps, etc.

--create XML lib

--create json lib

--create csv lib

--use fork/join framework



--finish the template-project and apply everything I think of
to all the projects. Use core and datastructures as examples

Implement jocl and cuda and when we use collection.parallelStream()
Orion will detect what kind of graphics card you have and the number
of CPU cores and based on the size of the stream it will decide if
it will use the CPU it jocl or cuda

Integrate many existing Java etc. Libraries and systems like Apache
and spring systems



--CREATE CONVENIENT filter() AND forEach() IN OrionArrayList=========
enable the stream() so that I don't have to write it every time
methodsList.stream().filter((method) -> method != null).forEach(this::processMethod);
methodsList.filter((method) -> method != null).forEach(this::processMethod);



--CREATE CONVENIENT LAMBDA IF/THEN/ELSE========
so that we can have something like:
myObject.when(some != null).then(myObject::processMethod);



--in Filter.java there is the following method=======


@Override
public Object executeFilter()
{
    if(function instanceof OrionAbstractFunction)
    {
        return ((OrionAbstractFunction)function).executeFunction();
    }
    else if(function instanceof OrionServiceTask)
    {
        return ((OrionServiceTask)function).run();
    }
    
    return null;
}


instead of manually checking the instanceof, use configuration/Pipeline.prop in which I explicitly
declare the class types OrionAbstractFunction and OrionServiceTask and use that config to do
the checking in a loop with stream() like: for each class type, if function instanceof thisClassType,
return ((OrionAbstractFunction)function).run();


--NEW PROJECT GENERATOR dev tool=============
create a dev tool that after you create an empty project, it will generate the necessary general and
services dir and default interfaces and abstract classes, etc.



--for the @Injector, see if I can do something like this:
private Kitchen kitchen;
private Bedroom bedroom;
@Injector
House(Kitchen k, Bedroom b)
{
    this.kitchen = k;
    this.bedroom = b;
}
-make it a constructor annotation, but figure out how to avoid StackOverFlowError




http://projects-old.apache.org/indexes/alpha.html
https://github.com/apache?utf8=%E2%9C%93&query=ace
https://github.com/apache/ace
https://github.com/apache/ace/tree/trunk/org.apache.ace.agent/src/org/apache/ace/agent
https://github.com/apache/ace/blob/trunk/org.apache.ace.agent/src/org/apache/ace/agent/AgentConstants.java


--create macrodef that signs JARs (MD5, SHA512). Use gpg

--create strings library

--see if I can embed OSGi inside Orion so that I can
use libraries as bundles, more easily. Put it in the core

--a properties namespace is a prefix for a collection
of related properties. For example, props like:
core.my.new.property.1=hello
core.my.other.property.2=world
the namespace here is "core"
For props like:
designpatternsfacades.my.new.property.1=hello
designpatternsfacades.my.other.property.2=world
the namespace is "designpatternsfacades"

--event-driven in libraries. How can we create something like a Spring
or Tomcat container so that the libraries are executed in an environment the core project can control?

--whenever something is "updated" at run-time, dynamically, use an "updater service"

--we could enable "in-library" permissions. You could "login" in the library in order to use it

--create custom exceptions

--in /workspaces/orion/ create dir orionware-platform.
--create dir /workspaces/orion/orionware-general.
--put delivery-engine project and whatever else from orionware-libraries to
/workspaces/orion/orionware-general, abstractise ant-tasks, etc.
--create documentation project in platform.
--put tomcat in platform.
--use HSQL as an embedded database. Make it configurable for the dev to select
which database he wants to use.
--find a way to have multiple database engines.