--make ApplyAnnotationsTask more efficient

--facades should only use DTOs and not models. A DTO has a subset of vars
from the respective model + any other vars necessary for the facade or
the caller of the facade

--instead of null collections or arrays return empty ones

--methods should not return nulls. They should return like an empty list.
I can also use JDK8's Optionals like this:
Optional<Order> result = findOrderById(id);
if(result.isPresent())
    // result logic using result.get()
else
    // no result logic

or:

public Optional<Order> findOrderById(String id)
{
    OrderResponse response = lookup(id);
    if(response.success)
        return Optional.of(response.result);
    else
        return Optional.absent();
}


--create data classes as needed

--don't use IF/ELSE in constructors

--for the @Injector, see if I can do something like this:
private Kitchen kitchen;
private Bedroom bedroom;
@Injector
House(Kitchen k, Bedroom b)
{
    this.kitchen = k;
    this.bedroom = b;
}

--for the "core" project = for complicated dependency (object) construction,
use ObjectDependenciesBuilder.java. This builder will be called by the constructor
and will instantiate the dependencies and in the constructor you can do:
this.varName = builder.getVarName();

--instead of constants classes like CoreConfiguration.java, make it a normal
object and its constructor will populate the values in the static final vars
and inject the object to whomever needs it like OrionObject.java

--make constant classes "final" since all they have is public static finals

--split methods into tasks

--see if some of the instance vars of a class belong to a separate data class

--split services into smaller service classes

--in config classes where I have static vars, see where I can use enums

--interfaces can declare methods, but also "default" modifier in which we can provide a default impl of the method inside the interface

--for annotations processing see if I can do getAnnotation(annotation.getClass());




--put 3rd-party libraries and Orion-generated ones in a common project
called "all-libraries" for easy visibility across projects. I know that
this way projects will not have their own lib dir with only the JARs
they need, but this way we would have several copies of the same JARs


--created a "libraries-builder" project that has the necessary Ant
files and prop files to build all the projects in the correct order