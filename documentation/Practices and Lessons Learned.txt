--instead of constants classes like CoreConfiguration.java, make it a normal
object and its constructor will populate the values in the static final vars
and inject the object to whomever needs it like OrionObject.java

--for the "core" project = for complicated dependency (object) construction,
use ObjectDependenciesBuilder.java. This builder will be called by the constructor
and will instantiate the dependencies and in the constructor you can do:
this.varName = builder.getVarName();

--see if some of the instance vars of a class belong to a separate data class

--split services into smaller service classes

--in config classes where I have static vars, see where I can use enums

--interfaces can declare methods, but also "default" modifier in which we can
provide a default impl of the method inside the interface

--for annotations processing see if I can do getAnnotation(annotation.getClass());

--split classes with private methods into more task classes

--make ApplyAnnotationsTask more efficient




--put 3rd-party libraries and Orion-generated ones in a common project
called "all-libraries" for easy visibility across projects. I know that
this way projects will not have their own lib dir with only the JARs
they need, but this way we would have several copies of the same JARs


--created a "libraries-builder" project that has the necessary Ant
files and prop files to build all the projects in the correct order